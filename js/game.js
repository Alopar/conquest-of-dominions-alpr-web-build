// –ò–≥—Ä–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
let gameState = {
    attackers: [],
    defenders: [],
    currentTurn: 1,
    battleLog: [],
    battleEnded: false
};

// –î–µ–ª–∞–µ–º gameState –¥–æ—Å—Ç—É–ø–Ω—ã–º –≥–ª–æ–±–∞–ª—å–Ω–æ
window.gameState = gameState;

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫—É–±–∏–∫–∞–º–∏
function rollDice(sides) {
    return Math.floor(Math.random() * sides) + 1;
}

function parseDamage(damageStr) {
    const match = damageStr.match(/(\d+)d(\d+)/);
    if (match) {
        const count = parseInt(match[1]);
        const sides = parseInt(match[2]);
        let total = 0;
        for (let i = 0; i < count; i++) {
            total += rollDice(sides);
        }
        return total;
    }
    return 1;
}

// –°–æ–∑–¥–∞–Ω–∏–µ —é–Ω–∏—Ç–∞ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
function createUnit(typeId, unitId) {
    if (!window.battleConfig || !window.battleConfig.unitTypes || !window.battleConfig.unitTypes[typeId]) {
        console.error(`–¢–∏–ø —é–Ω–∏—Ç–∞ ${typeId} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏`);
        return null;
    }
    const type = window.battleConfig.unitTypes[typeId];
    return {
        id: unitId,
        typeId: typeId,
        name: type.name,
        hp: type.hp,
        maxHp: type.hp,
        damage: type.damage,
        view: type.view,
        hasAttackedThisTurn: false,
        alive: true
    };
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞—Ä–º–∏–π –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
function initializeArmies() {
    if (!window.battleConfig) {
        console.error('–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞');
        return;
    }
    
    window.gameState.attackers = [];
    window.gameState.defenders = [];
    
    let unitIdCounter = 0;
    const currentSettings = window.getCurrentSettings();
    const maxUnits = currentSettings.maxUnitsPerArmy;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –∞—Ä–º–∏–π
    const attackersLabel = document.getElementById('attackers-label');
    const defendersLabel = document.getElementById('defenders-label');
    
    if (attackersLabel && window.battleConfig.armies.attackers.name) {
        const description = window.battleConfig.armies.attackers.description ? ` - ${window.battleConfig.armies.attackers.description}` : '';
        attackersLabel.textContent = `${window.battleConfig.armies.attackers.name}${description}`;
    }
    
    if (defendersLabel && window.battleConfig.armies.defenders.name) {
        const description = window.battleConfig.armies.defenders.description ? ` - ${window.battleConfig.armies.defenders.description}` : '';
        defendersLabel.textContent = `${window.battleConfig.armies.defenders.name}${description}`;
    }
    
    // –°–æ–∑–¥–∞–Ω–∏–µ –∞—Ç–∞–∫—É—é—â–∏—Ö –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    for (const unitGroup of window.battleConfig.armies.attackers.units) {
        for (let i = 0; i < unitGroup.count && window.gameState.attackers.length < maxUnits; i++) {
            const unit = createUnit(unitGroup.id, `attacker_${unitIdCounter++}`);
            if (unit) {
                window.gameState.attackers.push(unit);
            }
        }
    }
    
    // –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—â–∏—Ç–Ω–∏–∫–æ–≤ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    for (const unitGroup of window.battleConfig.armies.defenders.units) {
        for (let i = 0; i < unitGroup.count && window.gameState.defenders.length < maxUnits; i++) {
            const unit = createUnit(unitGroup.id, `defender_${unitIdCounter++}`);
            if (unit) {
                window.gameState.defenders.push(unit);
            }
        }
    }
    
    window.gameState.battleEnded = false;
    window.gameState.battleLog = [];
    window.gameState.currentTurn = 1;
}

// –õ–æ–≥–∏–∫–∞ –±–æ—è
function executeStep(army) {
    if (window.gameState.battleEnded) return;
    
    const units = army === 'attackers' ? window.gameState.attackers : window.gameState.defenders;
    const enemies = army === 'attackers' ? window.gameState.defenders : window.gameState.attackers;
    
    // –ù–∞—Ö–æ–¥–∏–º –∂–∏–≤—ã—Ö —é–Ω–∏—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –µ—â–µ –Ω–µ –∞—Ç–∞–∫–æ–≤–∞–ª–∏
    const availableUnits = units.filter(unit => unit.alive && !unit.hasAttackedThisTurn);
    
    if (availableUnits.length === 0) {
        window.addToLog(`–í—Å–µ ${army === 'attackers' ? '–∞—Ç–∞–∫—É—é—â–∏–µ' : '–∑–∞—â–∏—Ç–Ω–∏–∫–∏'} —É–∂–µ –∞—Ç–∞–∫–æ–≤–∞–ª–∏ –≤ —ç—Ç–æ–º —Ö–æ–¥—É`);
        return;
    }
    
    // –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–≥–æ —é–Ω–∏—Ç–∞ –¥–ª—è –∞—Ç–∞–∫–∏
    const attacker = availableUnits[Math.floor(Math.random() * availableUnits.length)];
    
    // –ù–∞—Ö–æ–¥–∏–º –∂–∏–≤—ã—Ö –≤—Ä–∞–≥–æ–≤
    const aliveEnemies = enemies.filter(unit => unit.alive);
    
    if (aliveEnemies.length === 0) {
        window.addToLog(`–í—Å–µ ${army === 'attackers' ? '–∑–∞—â–∏—Ç–Ω–∏–∫–∏' : '–∞—Ç–∞–∫—É—é—â–∏–µ'} —É–∂–µ –º–µ—Ä—Ç–≤—ã!`);
        endBattle(army);
        return;
    }
    
    // –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é —Ü–µ–ª—å
    const target = aliveEnemies[Math.floor(Math.random() * aliveEnemies.length)];
    
    // –í—ã–ø–æ–ª–Ω—è–µ–º –∞—Ç–∞–∫—É
    performAttack(attacker, target, army);
    
    // –û—Ç–º–µ—á–∞–µ–º, —á—Ç–æ —é–Ω–∏—Ç –∞—Ç–∞–∫–æ–≤–∞–ª
    attacker.hasAttackedThisTurn = true;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    renderArmies();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–∫–æ–Ω—á–∏–ª—Å—è –ª–∏ –±–æ–π
    checkBattleEnd();
}

function performAttack(attacker, target, army) {
    const currentSettings = window.getCurrentSettings();
    const hitThreshold = currentSettings.hitThreshold;
    const criticalHit = currentSettings.criticalHit;
    
    // –ë—Ä–æ—Å–∞–µ–º –∫—É–±–∏–∫ –Ω–∞ –ø–æ–ø–∞–¥–∞–Ω–∏–µ
    const attackRoll = rollDice(20);
    
    if (attackRoll >= hitThreshold) {
        // –ü–æ–ø–∞–¥–∞–Ω–∏–µ!
        let damage = parseDamage(attacker.damage);
        
        if (attackRoll >= criticalHit) {
            damage *= 2;
            window.addToLog(`üéØ ${attacker.name} –Ω–∞–Ω–æ—Å–∏—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —É–¥–∞—Ä ${target.name} (${damage} —É—Ä–æ–Ω–∞)!`);
        } else {
            window.addToLog(`‚öîÔ∏è ${attacker.name} –∞—Ç–∞–∫—É–µ—Ç ${target.name} (${damage} —É—Ä–æ–Ω–∞)`);
        }
        
        target.hp -= damage;
        
        if (target.hp <= 0) {
            target.hp = 0;
            target.alive = false;
            window.addToLog(`üíÄ ${target.name} –ø–æ–≥–∏–±–∞–µ—Ç!`);
        }
    } else {
        window.addToLog(`‚ùå ${attacker.name} –ø—Ä–æ–º–∞—Ö–∏–≤–∞–µ—Ç—Å—è –ø–æ ${target.name}`);
    }
}

function nextTurn() {
    if (window.gameState.battleEnded) return;
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥–∏ –∞—Ç–∞–∫–∏ –¥–ª—è –≤—Å–µ—Ö —é–Ω–∏—Ç–æ–≤
    window.gameState.attackers.forEach(unit => unit.hasAttackedThisTurn = false);
    window.gameState.defenders.forEach(unit => unit.hasAttackedThisTurn = false);
    
    window.gameState.currentTurn++;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ —Ö–æ–¥–æ–≤
    const turnCounter = document.getElementById('turn-counter');
    if (turnCounter) {
        turnCounter.textContent = `–•–æ–¥: ${window.gameState.currentTurn}`;
    }
    
    window.addToLog(`üîÑ –ù–∞—á–∏–Ω–∞–µ—Ç—Å—è —Ö–æ–¥ ${window.gameState.currentTurn}`);
    renderArmies();
}

function checkBattleEnd() {
    const attackersAlive = window.gameState.attackers.some(unit => unit.alive);
    const defendersAlive = window.gameState.defenders.some(unit => unit.alive);
    
    if (!attackersAlive) {
        endBattle('defenders');
    } else if (!defendersAlive) {
        endBattle('attackers');
    }
}

function endBattle(winner) {
    window.gameState.battleEnded = true;
    
    const winnerName = winner === 'attackers' ? '–ê—Ç–∞–∫—É—é—â–∏–µ' : '–ó–∞—â–∏—Ç–Ω–∏–∫–∏';
    window.addToLog(`üèÜ ${winnerName} –ø–æ–±–µ–∂–¥–∞—é—Ç!`);
    window.addToLog(`–ë–æ–π –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ ${window.gameState.currentTurn} —Ö–æ–¥–æ–≤`);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
    updateButtonStates();
}

function resetBattle() {
    initializeArmies();
    renderArmies();
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ —Ö–æ–¥–æ–≤
    const turnCounter = document.getElementById('turn-counter');
    if (turnCounter) {
        turnCounter.textContent = '–•–æ–¥: 1';
    }
    
    // –û—á–∏—â–∞–µ–º –ª–æ–≥
    const logDiv = document.getElementById('battle-log');
    if (logDiv) {
        logDiv.innerHTML = '';
    }
    
    window.addToLog('üîÑ –ë–æ–π —Å–±—Ä–æ—à–µ–Ω');
}

// –î–µ–ª–∞–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –≥–ª–æ–±–∞–ª—å–Ω–æ
window.executeStep = executeStep;
window.nextTurn = nextTurn;
window.resetBattle = resetBattle;
window.initializeArmies = initializeArmies;
