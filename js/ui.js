// –§—É–Ω–∫—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∞—Ä–º–∏–π
function renderArmies() {
    const defendersLine = document.getElementById('defenders-line');
    const attackersLine = document.getElementById('attackers-line');
    
    defendersLine.innerHTML = '';
    attackersLine.innerHTML = '';
    
    // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞—â–∏—Ç–Ω–∏–∫–æ–≤
    window.gameState.defenders.forEach((unit, index) => {
        const unitDiv = document.createElement('div');
        let className = 'unit';
        if (!unit.alive) className += ' dead';
        else if (unit.hasAttackedThisTurn) className += ' attacked';
        
        unitDiv.className = className;
        const displayIcon = unit.alive ? unit.view : 'üíÄ';
        unitDiv.innerHTML = `
            ${displayIcon}
            <div class="hp-bar" style="width: ${(unit.hp / unit.maxHp) * 100}%"></div>
        `;
        unitDiv.title = `${unit.name} (${unit.hp}/${unit.maxHp} HP)`;
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –ø–æ–∫–∞–∑–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        unitDiv.addEventListener('mouseenter', () => showUnitInfo(unit));
        unitDiv.addEventListener('mouseleave', hideUnitInfo);
        
        defendersLine.appendChild(unitDiv);
    });
    
    // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∞—Ç–∞–∫—É—é—â–∏—Ö
    window.gameState.attackers.forEach((unit, index) => {
        const unitDiv = document.createElement('div');
        let className = 'unit';
        if (!unit.alive) className += ' dead';
        else if (unit.hasAttackedThisTurn) className += ' attacked';
        
        unitDiv.className = className;
        const displayIcon = unit.alive ? unit.view : 'üíÄ';
        unitDiv.innerHTML = `
            ${displayIcon}
            <div class="hp-bar" style="width: ${(unit.hp / unit.maxHp) * 100}%"></div>
        `;
        unitDiv.title = `${unit.name} (${unit.hp}/${unit.maxHp} HP)`;
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –ø–æ–∫–∞–∑–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        unitDiv.addEventListener('mouseenter', () => showUnitInfo(unit));
        unitDiv.addEventListener('mouseleave', hideUnitInfo);
        
        attackersLine.appendChild(unitDiv);
    });
    
    updateButtonStates();
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–Ω–æ–ø–æ–∫
function updateButtonStates() {
    const stepBtn = document.getElementById('step-btn');
    const nextTurnBtn = document.getElementById('next-turn-btn');

    if (!stepBtn || !nextTurnBtn) return;

    if (window.gameState.battleEnded) {
        stepBtn.disabled = true;
        nextTurnBtn.disabled = true;
        return;
    }

    let totalCanAttack = 0;

    for (let unit of window.gameState.attackers) {
        if (unit.alive && !unit.hasAttackedThisTurn) {
            totalCanAttack++;
        }
    }

    for (let unit of window.gameState.defenders) {
        if (unit.alive && !unit.hasAttackedThisTurn) {
            totalCanAttack++;
        }
    }

    stepBtn.disabled = (totalCanAttack === 0);
    nextTurnBtn.disabled = (totalCanAttack > 0);
}

// –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —é–Ω–∏—Ç–µ
function showUnitInfo(unit) {
    const panel = document.getElementById('unit-info-panel');
    const typeSpan = document.getElementById('unit-type');
    const hpSpan = document.getElementById('unit-hp');
    const damageSpan = document.getElementById('unit-damage');
    const statusSpan = document.getElementById('unit-status');
    
    if (panel && typeSpan && hpSpan && damageSpan && statusSpan) {
        // –î–æ–±–∞–≤–ª—è–µ–º –∏–∫–æ–Ω–∫—É —é–Ω–∏—Ç–∞ –ø–µ—Ä–µ–¥ –Ω–∞–∑–≤–∞–Ω–∏–µ–º
        typeSpan.innerHTML = `${unit.view} ${unit.name}`;
        hpSpan.textContent = `${unit.hp}/${unit.maxHp}`;
        damageSpan.textContent = unit.damage;
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∏–∫–æ–Ω–∫–∏ —Å—Ç–∞—Ç—É—Å–∞
        let statusText = '';
        if (!unit.alive) {
            statusText = 'üíÄ –ú–µ—Ä—Ç–≤';
        } else if (unit.hasAttackedThisTurn) {
            statusText = '‚öîÔ∏è –ê—Ç–∞–∫–æ–≤–∞–ª';
        } else {
            statusText = '‚úÖ –ì–æ—Ç–æ–≤';
        }
        statusSpan.innerHTML = statusText;
        
        panel.style.display = 'block';
    }
}

// –°–∫—Ä—ã—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —é–Ω–∏—Ç–µ
function hideUnitInfo() {
    const panel = document.getElementById('unit-info-panel');
    if (panel) {
        panel.style.display = 'none';
    }
}

// –î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å –≤ –ª–æ–≥
function addToLog(message) {
    const currentSettings = window.getCurrentSettings();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω—ã–π –ª–æ–≥
    if (!currentSettings.battleSettings.showDetailedLog && 
        (message.includes('–ø—Ä–æ–º–∞—Ö–∏–≤–∞–µ—Ç—Å—è') || message.includes('–∞—Ç–∞–∫—É–µ—Ç'))) {
        return; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –∞—Ç–∞–∫–∞—Ö
    }
    
    const logDiv = document.getElementById('battle-log');
    if (!logDiv) return;
    
    const entry = document.createElement('div');
    entry.className = 'log-entry';
    entry.textContent = message;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –≤ –Ω–∞—á–∞–ª–æ
    if (logDiv.firstChild) {
        logDiv.insertBefore(entry, logDiv.firstChild);
    } else {
        logDiv.appendChild(entry);
    }
}

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —ç–∫—Ä–∞–Ω–æ–≤
function showIntro() {
    const introScreen = document.getElementById('intro-screen');
    const battleScreen = document.getElementById('battle-screen');
    
    introScreen.classList.add('active');
    introScreen.style.display = 'flex';
    battleScreen.classList.remove('active');
    battleScreen.style.display = 'none';
    const logDiv = document.getElementById('battle-log');
    if (logDiv) logDiv.innerHTML = '';
}

function showBattle() {
    // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —ç–∫—Ä–∞–Ω—ã –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —ç–∫—Ä–∞–Ω –±–æ—è
    document.querySelectorAll('.screen').forEach(s => {
        s.classList.remove('active');
        s.style.display = 'none';
    });
    const battleScreen = document.getElementById('battle-screen');
    battleScreen.classList.add('active');
    battleScreen.style.display = 'flex';
    const logDiv = document.getElementById('battle-log');
    if (logDiv) logDiv.innerHTML = '';
}

// –≠–∫—Ä–∞–Ω "–°—Ö–≤–∞—Ç–∫–∞"
function showFight() {
    // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —ç–∫—Ä–∞–Ω—ã
    document.querySelectorAll('.screen').forEach(s => {
        s.classList.remove('active');
        s.style.display = 'none';
    });
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —ç–∫—Ä–∞–Ω —Å—Ö–≤–∞—Ç–∫–∏
    const fightScreen = document.getElementById('fight-screen');
    fightScreen.classList.add('active');
    fightScreen.style.display = 'flex';
    const logDiv = document.getElementById('battle-log');
    if (logDiv) logDiv.innerHTML = '';
}

function backToIntroFromFight() {
    // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —ç–∫—Ä–∞–Ω—ã
    document.querySelectorAll('.screen').forEach(s => {
        s.classList.remove('active');
        s.style.display = 'none';
    });
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω
    const introScreen = document.getElementById('intro-screen');
    introScreen.classList.add('active');
    introScreen.style.display = 'flex';
    const logDiv = document.getElementById('battle-log');
    if (logDiv) logDiv.innerHTML = '';
}

// –ó–∞–ø—É—Å–∫ –±–æ—è
function startBattle() {
    if (!window.configLoaded) {
        alert('–°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é!');
        return;
    }
    const logDiv = document.getElementById('battle-log');
    if (logDiv) {
        logDiv.innerHTML = '';
    }
    initializeArmies();
    renderArmies();
    showBattle();

    window.addToLog('üö© –ë–æ–π –Ω–∞—á–∞–ª—Å—è!');
    window.addToLog(`–ê—Ç–∞–∫—É—é—â–∏–µ: ${window.gameState.attackers.length} —é–Ω–∏—Ç–æ–≤`);
    window.addToLog(`–ó–∞—â–∏—Ç–Ω–∏–∫–∏: ${window.gameState.defenders.length} —é–Ω–∏—Ç–æ–≤`);
}

// –î–µ–ª–∞–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –≥–ª–æ–±–∞–ª—å–Ω–æ
window.startBattle = startBattle;
window.showIntro = showIntro;
window.showBattle = showBattle;
window.showFight = showFight;
window.backToIntroFromFight = backToIntroFromFight;
window.addToLog = addToLog;
window.showUnitInfo = showUnitInfo;
window.hideUnitInfo = hideUnitInfo;
window.renderArmies = renderArmies;
window.updateButtonStates = updateButtonStates;
