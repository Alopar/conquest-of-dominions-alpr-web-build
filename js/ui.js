// –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —ç–∫—Ä–∞–Ω–æ–≤
function showScreen(id) {
    document.querySelectorAll('.screen').forEach(s => {
        s.classList.remove('active');
        s.style.display = 'none';
    });
    const el = document.getElementById(id);
    if (!el) return;
    el.classList.add('active');
    el.style.display = (id === 'intro-screen' || id === 'battle-screen' || id === 'adventure-screen') ? 'flex' : 'block';
}

// –§—É–Ω–∫—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞

// –†–µ–Ω–¥–µ—Ä –æ–¥–Ω–æ–≥–æ —é–Ω–∏—Ç–∞
function renderUnit(unit, army) {
    const unitDiv = document.createElement('div');
    let className = 'unit';
    if (!unit.alive) className += ' dead';
    else if (unit.hasAttackedThisTurn) className += ' attacked';
    unitDiv.className = className;
    unitDiv.dataset.unitId = unit.id;
    unitDiv.dataset.army = army;
    const pending = (typeof window.isKillPending === 'function') && window.isKillPending(unit.id, army);
    const displayIcon = (unit.alive || pending) ? unit.view : 'üíÄ';
    const hpPct = Math.max(0, Math.min(100, (unit.hp / unit.maxHp) * 100));
    unitDiv.innerHTML = `
        ${displayIcon}
        <div class="hp-bar"></div>
    `;
    unitDiv.style.setProperty('--hp', hpPct + '%');
    unitDiv.title = `${unit.name} (${unit.hp}/${unit.maxHp} HP)`;
    unitDiv.addEventListener('mouseenter', () => showUnitInfo(unit));
    unitDiv.addEventListener('mouseleave', hideUnitInfo);
    return unitDiv;
}

// –†–µ–Ω–¥–µ—Ä –ª–∏–Ω–∏–∏ –æ–¥–Ω–æ–π –∞—Ä–º–∏–∏
function renderArmyLine(units, army, lineEl) {
    lineEl.innerHTML = '';
    const frag = document.createDocumentFragment();
    units.forEach((unit) => {
        frag.appendChild(renderUnit(unit, army));
    });
    lineEl.appendChild(frag);
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∞—Ä–º–∏–π
function renderArmies() {
    const defendersLine = document.getElementById('defenders-line');
    const attackersLine = document.getElementById('attackers-line');
    renderArmyLine(window.gameState.defenders, 'defenders', defendersLine);
    renderArmyLine(window.gameState.attackers, 'attackers', attackersLine);
    if (window.applyPendingAnimations) window.applyPendingAnimations();
    updateButtonStates();
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–Ω–æ–ø–æ–∫
function updateButtonStates() {
    const stepBtn = document.getElementById('step-btn');
    const nextTurnBtn = document.getElementById('next-turn-btn');
    const finishBtn = document.getElementById('battle-finish-btn');
    const retryBtn = document.getElementById('battle-retry-btn');

    if (!stepBtn || !nextTurnBtn) return;

    if (window.gameState.battleEnded) {
        stepBtn.disabled = true;
        nextTurnBtn.disabled = true;
        const isAdventureBattle = (typeof window.battleConfigSource !== 'undefined' && window.battleConfigSource === 'adventure');
        if (finishBtn) finishBtn.style.display = isAdventureBattle ? '' : 'none';
        if (retryBtn) retryBtn.style.display = isAdventureBattle ? 'none' : '';
        return;
    } else {
        if (finishBtn) finishBtn.style.display = 'none';
        if (retryBtn) retryBtn.style.display = 'none';
    }

    let totalCanAttack = 0;

    for (let unit of window.gameState.attackers) {
        if (unit.alive && !unit.hasAttackedThisTurn) {
            totalCanAttack++;
        }
    }

    for (let unit of window.gameState.defenders) {
        if (unit.alive && !unit.hasAttackedThisTurn) {
            totalCanAttack++;
        }
    }

    stepBtn.disabled = (totalCanAttack === 0);
    nextTurnBtn.disabled = (totalCanAttack > 0);
}

// –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —é–Ω–∏—Ç–µ
function showUnitInfo(unit) {
    const panel = document.getElementById('unit-info-panel');
    const nameSpan = document.getElementById('unit-name');
    const typeSpan = document.getElementById('unit-type');
    const hpSpan = document.getElementById('unit-hp');
    const damageSpan = document.getElementById('unit-damage');
    const targetsSpan = document.getElementById('unit-targets');
    const statusSpan = document.getElementById('unit-status');
    
    if (panel && nameSpan && typeSpan && hpSpan && damageSpan && targetsSpan && statusSpan) {
        // –ò–º—è —Å –∏–∫–æ–Ω–∫–æ–π
        nameSpan.innerHTML = `${unit.view} ${unit.name}`;
        // –¢–∏–ø
        const types = (window.battleConfig && window.battleConfig.unitTypes) ? window.battleConfig.unitTypes : {};
        const t = types[unit.typeId];
        const role = t && t.type ? String(t.type) : '';
        typeSpan.textContent = role;
        hpSpan.textContent = `${unit.hp}/${unit.maxHp}`;
        damageSpan.textContent = `${unit.damage}`;
        targetsSpan.textContent = `${Number(unit.targets || 1)}`;
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∏–∫–æ–Ω–∫–∏ —Å—Ç–∞—Ç—É—Å–∞
        let statusText = '';
        if (!unit.alive) {
            statusText = 'üíÄ –ú–µ—Ä—Ç–≤';
        } else if (unit.hasAttackedThisTurn) {
            statusText = '‚öîÔ∏è –ê—Ç–∞–∫–æ–≤–∞–ª';
        } else {
            statusText = '‚úÖ –ì–æ—Ç–æ–≤';
        }
        statusSpan.innerHTML = statusText;
        
        panel.style.display = 'block';
    }
}

// –°–∫—Ä—ã—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —é–Ω–∏—Ç–µ
function hideUnitInfo() {
    const panel = document.getElementById('unit-info-panel');
    if (panel) {
        panel.style.display = 'none';
    }
}

// –î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å –≤ –ª–æ–≥
function addToLog(message) {
    const currentSettings = window.getCurrentSettings();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω—ã–π –ª–æ–≥
    if (!currentSettings.battleSettings.showDetailedLog && 
        (message.includes('–ø—Ä–æ–º–∞—Ö–∏–≤–∞–µ—Ç—Å—è') || message.includes('–∞—Ç–∞–∫—É–µ—Ç'))) {
        return; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –∞—Ç–∞–∫–∞—Ö
    }
    
    const logDiv = document.getElementById('battle-log');
    if (!logDiv) return;
    
    const entry = document.createElement('div');
    entry.className = 'log-entry';
    entry.textContent = message;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –≤ –Ω–∞—á–∞–ª–æ
    if (logDiv.firstChild) {
        logDiv.insertBefore(entry, logDiv.firstChild);
    } else {
        logDiv.appendChild(entry);
    }
}

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —ç–∫—Ä–∞–Ω–æ–≤
function showIntro() {
    showScreen('intro-screen');
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ –∫–æ–Ω—Ñ–∏–≥–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –Ω–∞ –≥–ª–∞–≤–Ω—É—é, —á—Ç–æ–±—ã –Ω–æ–≤—ã–π —Å—Ç–∞—Ä—Ç —Å—Ö–≤–∞—Ç–∫–∏ –ø–æ–¥—Ö–≤–∞—Ç–∏–ª —Å–≤–æ–π –∫–æ–Ω—Ñ–∏–≥
    try { window.battleConfigSource = undefined; } catch {}
    const logDiv = document.getElementById('battle-log');
    if (logDiv) logDiv.innerHTML = '';
}

function showBattle() {
    showScreen('battle-screen');
    const logDiv = document.getElementById('battle-log');
    if (logDiv) logDiv.innerHTML = '';
}

// –≠–∫—Ä–∞–Ω "–°—Ö–≤–∞—Ç–∫–∞"
function showFight() {
    showScreen('fight-screen');
    const logDiv = document.getElementById('battle-log');
    if (logDiv) logDiv.innerHTML = '';
}

function backToIntroFromFight() {
    showScreen('intro-screen');
    const logDiv = document.getElementById('battle-log');
    if (logDiv) logDiv.innerHTML = '';
}

// –ó–∞–ø—É—Å–∫ –±–æ—è
function startBattle() {
    if (!window.configLoaded) {
        alert('–°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é!');
        return;
    }
    // –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º, —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–æ–Ω—Ñ–∏–≥ —Å—Ö–≤–∞—Ç–∫–∏, –∞ –Ω–µ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è
    if (window.battleConfigSource !== 'fight') {
        const warn = '–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—è –Ω–µ –∏–∑ —Ä–µ–∂–∏–º–∞ –°—Ö–≤–∞—Ç–∫–∞. –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞—é —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é.';
        try { console.warn(warn); } catch {}
        if (window.loadDefaultConfig) {
            // –ü–µ—Ä–µ–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –∫–æ–Ω—Ñ–∏–≥ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ —á–µ—Ä–µ–∑ then
            window.loadDefaultConfig().then(() => {
                proceedStartBattle();
            }).catch(() => {
                proceedStartBattle();
            });
            return;
        }
    }
    proceedStartBattle();
}

function proceedStartBattle() {
    const logDiv = document.getElementById('battle-log');
    if (logDiv) {
        logDiv.innerHTML = '';
    }
    const btnHome = document.getElementById('battle-btn-home');
    if (btnHome) btnHome.style.display = '';
    initializeArmies();
    renderArmies();
    showBattle();

    window.addToLog('üö© –ë–æ–π –Ω–∞—á–∞–ª—Å—è!');
    window.addToLog(`–ê—Ç–∞–∫—É—é—â–∏–µ: ${window.gameState.attackers.length} —é–Ω–∏—Ç–æ–≤`);
    window.addToLog(`–ó–∞—â–∏—Ç–Ω–∏–∫–∏: ${window.gameState.defenders.length} —é–Ω–∏—Ç–æ–≤`);
}

// –î–µ–ª–∞–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –≥–ª–æ–±–∞–ª—å–Ω–æ
window.startBattle = startBattle;
window.proceedStartBattle = proceedStartBattle;
window.showIntro = showIntro;
window.showBattle = showBattle;
window.showFight = showFight;
window.backToIntroFromFight = backToIntroFromFight;
window.addToLog = addToLog;
window.showUnitInfo = showUnitInfo;
window.hideUnitInfo = hideUnitInfo;
window.renderArmies = renderArmies;
window.updateButtonStates = updateButtonStates;

function finishBattleToAdventure() {
    if (!window.adventureState || !window.adventureState.config) return;
    // –í–æ–∑–≤—Ä–∞—Ç –Ω–∞ —ç–∫—Ä–∞–Ω –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è
    const hasAnyUnits = Object.values(window.adventureState.pool || {}).some(v => v > 0);
    const encLeft = (function(){
        try {
            const idx = window.adventureState.currentEncounterIndex;
            const encs = (window.adventureState.config && window.adventureState.config.encounters) || [];
            return idx < encs.length;
        } catch { return false; }
    })();
    if (!hasAnyUnits) {
        window.showAdventureResult('üíÄüíÄüíÄ –ü–æ—Ä–∞–∂–µ–Ω–∏–µ! –í—Å—è –∞—Ä–º–∏—è –ø–æ—Ç–µ—Ä—è–Ω–∞! üíÄüíÄüíÄ');
        return;
    }
    if (!encLeft) {
        window.showAdventureResult('‚ú®üèÜ‚ú® –ü–æ–±–µ–¥–∞! –í—Å–µ –∏—Å–ø—ã—Ç–∞–Ω–∏—è –ø—Ä–æ–π–¥–µ–Ω—ã! ‚ú®üèÜ‚ú®');
        return;
    }
    window.showAdventure();
}

function retryBattle() {
    if (window.adventureState && window.adventureState.inBattle) return; // –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–∏
    window.resetBattle();
}

window.finishBattleToAdventure = finishBattleToAdventure;
window.retryBattle = retryBattle;

async function showRules() {
    showScreen('rules-screen');

    const container = document.getElementById('rules-content');
    if (!container) return;
    container.textContent = '–ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–∞–≤–∏–ª...';
    try {
        const url = 'RULES.md?_=' + Date.now();
        const res = await fetch(url, { cache: 'no-store' });
        if (!res.ok) throw new Error('HTTP ' + res.status);
        const md = await res.text();
        // –ü—Ä–æ—Å—Ç–∞—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è Markdown -> HTML (–∑–∞–≥–æ–ª–æ–≤–∫–∏ –∏ —Å–ø–∏—Å–∫–∏)
        const html = md
            .replace(/^###\s+(.*)$/gm, '<h3>$1</h3>')
            .replace(/^##\s+(.*)$/gm, '<h2>$1</h2>')
            .replace(/^#\s+(.*)$/gm, '<h1>$1</h1>')
            .replace(/^-\s+(.*)$/gm, '<li>$1</li>')
            .replace(/(<li>.*<\/li>)(\s*(<li>.*<\/li>))+?/gms, m => `<ul>${m}</ul>`)
            .replace(/`([^`]+)`/g, '<code>$1</code>');
        container.innerHTML = html;
    } catch (e) {
        container.textContent = '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–∞–≤–∏–ª–∞';
    }
}

window.showRules = showRules;
